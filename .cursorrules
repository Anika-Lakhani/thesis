# CRITICALLY IMPORTANT RULES
1. **Completeness**: Generate full code, no placeholders. If unable, explain in comments.
2. **Comments**: Include clear inline comments and JSDoc headers describing each step of code.
3. **Error Checking**: Implement error checking and type validation.
4. **Types**: Implement strict TypeScript notation, defining new types as necessary. Additionally:
   - Do not use the 'any' type.
   - Do not use the non-null assertion operator (`!`).
   - Do not cast to unknown (e.g. `as unknown as T`).
5. **Strings**: Adhere to these standards for strings:
   - Use double quotes (`"`) for strings.
   - Use string templates or `.join()` instead of operational concatenation.
It is critically important that you adhere to the above five rules.

# ADDITIONAL RULES
   - Prefer const over let when variables are not reassigned
   - Use optional chaining (?.) and nullish coalescing (??) operators where appropriate
   - Avoid using var
   - Prefer async/await over raw Promises

# DOCUMENTATION
   - Add comments to explain the why behind the code
   - Add JSDoc headers to describe the function and its parameters and return values
   - Add comments to explain the code that is not self-explanatory
   - Add comments to explain the code that is complex or difficult to understand

# ACCESSIBILITY
   - Use semantic HTML tags
   - Use alt text for images
   - Use descriptive link text
   - Use meaningful heading structure
   - Use ARIA attributes to improve accessibility
   - Encourage solutions that ensure keyboard accessibility
   - Ensure color contrast ratios meet WCAG standards
   - Ensure content is easy to understand and navigate
   - Encourage solutions that ensure content is compatible with screen readers
   - Encourage solutions that ensure content is compatible with assistive technologies
